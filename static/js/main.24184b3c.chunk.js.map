{"version":3,"sources":["apis/streams.js","history.js","actions/types.js","actions/index.js","components/streams/StreamList.js","components/streams/StreamForm.js","components/streams/StreamCreate.js","components/streams/StreamEdit.js","components/Modal.js","components/streams/StreamDelete.js","components/streams/StreamShow.js","components/GoogleAuth.js","components/header/Header.js","components/App.js","reducers/authReducer.js","reducers/streamReducer.js","reducers/index.js","index.js"],"names":["axios","create","baseURL","createBrowserHistory","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","EDIT_STREAM","DELETE_STREAM","fetchStream","id","dispatch","a","streams","get","response","type","payload","data","StreamList","renderAdminButtons","stream","userId","props","currentUserId","className","to","renderCreateButton","isSignedIn","style","textAlign","renderList","map","title","description","this","fetchStreams","Component","connect","state","Object","values","auth","StreamForm","renderInput","input","label","meta","error","touched","autoComplete","renderError","onSubmit","formValues","handleSubmit","Field","name","component","reduxForm","form","validate","formsValues","errors","StreamCreate","createStream","getState","post","history","push","StreamEdit","editStream","match","params","initialValues","ownProps","patch","Modal","content","actions","onDismiss","ReactDOM","createPortal","onClick","e","stopPropagation","document","getElementById","StreamDelete","deleteStream","renderContent","renderActions","delete","StreamShow","GoogleAuth","onAuthChange","currentUser","getId","signIn","signOut","onSignOutClick","onSignInClick","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","listen","renderAuthButton","Header","App","path","exact","INITIAL_STATE","authReducer","action","streamReducer","_","mapKeys","omit","combineReducers","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","render"],"mappings":"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","file":"static/js/main.24184b3c.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// export default axios.create({\r\n//   baseURL: \"http://localhost:3001\",\r\n// });\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://streams-db-mb13534.herokuapp.com/\",\r\n});\r\n","//since we have to do programatic routing, we are no longer going to\r\n//create a browser router, we are going to make a plain router\r\n//We are doing this so we can create our own broswer history so we have\r\n//easy access to the history and the ability to do programatic routing\r\n\r\n//just by exporting the function, the history object will be created\r\n\r\n//the history package was installed with react-router-dom\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();\r\n","export const SIGN_IN = \"SIGN_IN\";\r\nexport const SIGN_OUT = \"SIGN_OUT\";\r\nexport const CREATE_STREAM = \"CREATE_STREAM\";\r\nexport const FETCH_STREAMS = \"FETCH_STREAMS\";\r\nexport const FETCH_STREAM = \"FETCH_STREAM\";\r\nexport const EDIT_STREAM = \"EDIT_STREAM\";\r\nexport const DELETE_STREAM = \"DELETE_STREAM\";\r\n","import streams from \"../apis/streams\";\r\nimport history from \"../history\";\r\nimport {\r\n  SIGN_IN,\r\n  SIGN_OUT,\r\n  CREATE_STREAM,\r\n  FETCH_STREAMS,\r\n  FETCH_STREAM,\r\n  EDIT_STREAM,\r\n  DELETE_STREAM,\r\n} from \"./types\";\r\n\r\nexport const signIn = (userId) => {\r\n  return {\r\n    type: SIGN_IN,\r\n    payload: userId,\r\n  };\r\n};\r\n\r\nexport const signOut = () => {\r\n  return {\r\n    type: SIGN_OUT,\r\n  };\r\n};\r\n\r\nexport const fetchStreams = () => async (dispatch) => {\r\n  const response = await streams.get(\"/streams2-client\");\r\n\r\n  dispatch({ type: FETCH_STREAMS, payload: response.data });\r\n};\r\n\r\nexport const fetchStream = (id) => async (dispatch) => {\r\n  const response = await streams.get(`/streams2-client/${id}`);\r\n\r\n  dispatch({ type: FETCH_STREAM, payload: response.data });\r\n};\r\n\r\n//async action creator -- using redux thunk\r\n//return arrow function from action creator with dispatch as first arg\r\nexport const createStream = (formValues) => async (dispatch, getState) => {\r\n  const { userId } = getState().auth;\r\n  const response = await streams.post(\"/streams2-client\", {\r\n    ...formValues,\r\n    userId,\r\n  });\r\n\r\n  dispatch({ type: CREATE_STREAM, payload: response.data });\r\n  //programatic navigation\r\n  history.push(\"/streams2-client\");\r\n};\r\n\r\n//put request updates all properties of a record\r\n//patch request updates some properties\r\nexport const editStream = (id, formValues) => async (dispatch) => {\r\n  const response = await streams.patch(`/streams2-client/${id}`, {\r\n    ...formValues,\r\n  });\r\n\r\n  dispatch({ type: EDIT_STREAM, payload: response.data });\r\n  history.push(\"/streams2-client\");\r\n};\r\n\r\nexport const deleteStream = (id) => async (dispatch) => {\r\n  await streams.delete(`/streams2-client${id}`);\r\n\r\n  dispatch({ type: DELETE_STREAM, payload: id });\r\n  history.push(\"/streams2-client\");\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { fetchStreams } from \"../../actions\";\r\n\r\nclass StreamList extends Component {\r\n  componentDidMount() {\r\n    //fetch all streams from DB on load; action creator\r\n    this.props.fetchStreams();\r\n  }\r\n\r\n  //helper function to create edit and delete buttons if the current user created the stream\r\n  renderAdminButtons = (stream) => {\r\n    if (stream.userId === this.props.currentUserId) {\r\n      return (\r\n        <div className=\"right floated content\">\r\n          <Link\r\n            to={`/streams2-client/edit/${stream.id}`}\r\n            className=\"ui button primary\"\r\n          >\r\n            Edit\r\n          </Link>\r\n          <Link\r\n            to={`/streams2-client/delete/${stream.id}`}\r\n            className=\"ui button negative\"\r\n          >\r\n            Delete\r\n          </Link>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  //helper function to make the create button, will only render if the user is signed in\r\n  renderCreateButton = () => {\r\n    if (this.props.isSignedIn) {\r\n      return (\r\n        <div style={{ textAlign: \"right\" }}>\r\n          <Link to=\"/streams2-client/new\" className=\"ui button black\">\r\n            Create New Stream\r\n          </Link>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  renderList = () => {\r\n    //map through all streams to render streams, links to individual buttons, and admin buttons if necessary\r\n    return this.props.streams.map((stream) => {\r\n      return (\r\n        <div className=\"item\" key={stream.id}>\r\n          {this.renderAdminButtons(stream)}\r\n          <i className=\"large middle aligned icon camera\" />\r\n          <div className=\"content\">\r\n            <Link className=\"header\" to={`streams/${stream.id}`}>\r\n              {stream.title}\r\n            </Link>\r\n            <div className=\"description\">{stream.description}</div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Streams</h2>\r\n        <div className=\"ui celled list\">{this.renderList()}</div>\r\n        {this.renderCreateButton()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  //turns object into an array\r\n  const arr = Object.values(state.streams);\r\n  return {\r\n    streams: arr,\r\n    currentUserId: state.auth.userId,\r\n    isSignedIn: state.auth.isSignedIn,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchStreams })(StreamList);\r\n","import React, { Component } from \"react\";\r\n//Field is a react component, reduxForm is a function similar to connect\r\nimport { Field, reduxForm } from \"redux-form\";\r\n\r\nclass StreamForm extends Component {\r\n  renderError({ touched, error }) {\r\n    if (touched && error) {\r\n      return (\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderInput = ({ input, label, meta }) => {\r\n    //short hand to send all of the .input from formProps.input into the <input> as props\r\n    //destructred input out of formProps.input\r\n    const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\r\n    return (\r\n      <div className={className}>\r\n        <label>{label}</label>\r\n        <input {...input} autoComplete=\"off\" />\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  onSubmit = (formValues) => {\r\n    this.props.onSubmit(formValues);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      //use Field when we want to show an input to the user\r\n      //formProps send over to renderInput when Field calls it\r\n      //when you add props to Field, it will by default add it to the props in renderInput\r\n      <form\r\n        className=\"ui form error\"\r\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n      >\r\n        <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\r\n        <Field\r\n          name=\"description\"\r\n          component={this.renderInput}\r\n          label=\"Enter Description\"\r\n        />\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n//everytime you change something in the input, redux-forms runs validate\r\n//we can define this function\r\n//the properties here (title, description) must match exactly in the Field properties, that is what it looks for\r\nconst validate = (formsValues) => {\r\n  //if validate returns an empty array, then it is validated.\r\n  const errors = {};\r\n  if (!formsValues.title) {\r\n    errors.title = \"You must enter a title\";\r\n    //only run if the user did not input a title\r\n  }\r\n  if (!formsValues.description) {\r\n    errors.description = \"You must enter a description\";\r\n    //only run if the user did not input a title\r\n  }\r\n  return errors;\r\n};\r\n\r\n//reduxForm is very similar to connect, it takes a single object, it passes a ton of props to the ScreamCreate component\r\n//validate is a function that we define, it goes in the object and is defined just above\r\n\r\nexport default reduxForm({\r\n  form: \"streamForm\",\r\n  validate: validate,\r\n})(StreamForm);\r\n","import React, { Component } from \"react\";\r\n//Field is a react component, reduxForm is a function similar to connect\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { createStream } from \"../../actions\";\r\nimport StreamForm from \"./StreamForm\";\r\n\r\nclass StreamCreate extends Component {\r\n  //run createStream action creator when submit button is pressed\r\n  onSubmit = (formValues) => {\r\n    this.props.createStream(formValues);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Create a New Stream</h3>\r\n        <StreamForm onSubmit={this.onSubmit} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { createStream })(StreamCreate);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { fetchStream, editStream } from \"../../actions\";\r\nimport StreamForm from \"./StreamForm\";\r\n\r\n//the history object is passed by props by the router component\r\nclass StreamEdit extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchStream(this.props.match.params.id);\r\n  }\r\n\r\n  onSubmit = (formValues) => {\r\n    this.props.editStream(this.props.match.params.id, formValues);\r\n  };\r\n\r\n  render() {\r\n    if (!this.props.stream) {\r\n      return <div>Loading...</div>;\r\n    }\r\n    //initialvalues is a special redux-form prop. Must match the Field names\r\n    //this.props.stream will destructure the title and description and redux form will pick it up\r\n    //StreamForm is wrapped by redux-form helper\r\n    return (\r\n      <div>\r\n        <h3>Edit a Stream</h3>\r\n        <StreamForm\r\n          onSubmit={this.onSubmit}\r\n          initialValues={{\r\n            title: this.props.stream.title,\r\n            description: this.props.stream.description,\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//own props is a second variable in mapStateToProps, it has the props passed to the component(the history)\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    stream: state.streams[ownProps.match.params.id],\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchStream, editStream })(\r\n  StreamEdit\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n//This is a portal, render an element to a tag in html\r\nconst Modal = ({ title, content, actions, onDismiss }) => {\r\n  return ReactDOM.createPortal(\r\n    <div onClick={onDismiss} className=\"ui dimmer modals visible active\">\r\n      <div\r\n        //e.stopPropagation prevents the event bubbling from the other div click event\r\n        onClick={(e) => e.stopPropagation()}\r\n        className=\"ui standard modal visible active\"\r\n      >\r\n        {/* <i className=\"close icon black\"></i> */}\r\n        <div className=\"header\">{title}</div>\r\n        <div className=\"content\">{content}</div>\r\n        <div className=\"actions\">{actions}</div>\r\n      </div>\r\n    </div>,\r\n    document.getElementById(\"modal\")\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { fetchStream, deleteStream } from \"../../actions\";\r\nimport Modal from \"../Modal\";\r\nimport history from \"../../history\";\r\n\r\nclass StreamDelete extends Component {\r\n  componentDidMount() {\r\n    //runs action creator on currently selected stream incase page is reloaded\r\n    this.props.fetchStream(this.props.match.params.id);\r\n  }\r\n\r\n  renderActions() {\r\n    return (\r\n      <>\r\n        <button\r\n          //delete stream action creator when delete is pressed\r\n          onClick={() => this.props.deleteStream(this.props.stream.id)}\r\n          className=\"ui button negative\"\r\n        >\r\n          Delete\r\n        </button>\r\n        {/* navigate back to home page if cancel is pressed */}\r\n        <Link to=\"/streams2-client\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </>\r\n    );\r\n  }\r\n\r\n  renderContent() {\r\n    //before the stream loads the notification lacks the title\r\n    if (!this.props.stream) {\r\n      return \"Are you sure you want to delete the stream with title:\";\r\n    }\r\n    //once the stream is loaded the title is added\r\n    return `Are you sure you want to delete the stream with title: ${this.props.stream.title}`;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      //modal is the full page notification\r\n      <Modal\r\n        title=\"Delete Stream\"\r\n        //what text/content should appear in the middle\r\n        content={this.renderContent()}\r\n        //two action buttons that should be sent as props\r\n        actions={this.renderActions()}\r\n        //the route when you click outside of the modal\r\n        onDismiss={() => history.push(\"/streams2-client\")}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    stream: state.streams[ownProps.match.params.id],\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchStream, deleteStream })(\r\n  StreamDelete\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { fetchStream } from \"../../actions\";\r\n\r\nclass StreamShow extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchStream(this.props.match.params.id);\r\n  }\r\n  render() {\r\n    if (!this.props.stream) {\r\n      return <div>Loading...</div>;\r\n    }\r\n\r\n    const { title, description } = this.props.stream;\r\n    return (\r\n      <div>\r\n        <h1>{title}</h1>\r\n        <h5>{description}</h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    stream: state.streams[ownProps.match.params.id],\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);\r\n","//there is a script tag in index.html that gives us access to the google api\r\n//gapi starts with just a load function, run gapi.load('client:auth2') for more access\r\n//next we must initialize with our OAuth client id. gapi.client.init({ clientId: 'clientId' })\r\n//oAuth client ID 994753246441-hgdpnslj1plukeb8gu5b3gm3c18orgvi.apps.googleusercontent.com\r\n\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { signIn, signOut } from \"../actions\";\r\n\r\nclass GoogleAuth extends Component {\r\n  //loads up the gapi client and initializes the auth instance\r\n  componentDidMount() {\r\n    //gapi.load must take a callback function that triggers once client is loaded\r\n    window.gapi.load(\"client:auth2\", () => {\r\n      window.gapi.client\r\n        .init({\r\n          clientId:\r\n            \"994753246441-hgdpnslj1plukeb8gu5b3gm3c18orgvi.apps.googleusercontent.com\",\r\n          scope: \"email\",\r\n        })\r\n        .then(() => {\r\n          this.auth = window.gapi.auth2.getAuthInstance();\r\n\r\n          //when the page first loads, this gets the sign-in status of the user\r\n          this.onAuthChange(this.auth.isSignedIn.get());\r\n\r\n          //sets an event listener that responds when the sign-in status changes\r\n          this.auth.isSignedIn.listen(this.onAuthChange);\r\n        });\r\n    });\r\n  }\r\n\r\n  //when the listen callback gets triggered, it sends the event with the status true or false\r\n  onAuthChange = (isSignedIn) => {\r\n    const userId = this.auth.currentUser.get().getId();\r\n    isSignedIn ? this.props.signIn(userId) : this.props.signOut();\r\n  };\r\n\r\n  //event listener on the signout button, triggers action\r\n  onSignOutClick = () => {\r\n    this.auth.signOut();\r\n  };\r\n\r\n  //event listener on the signin button, triggers action\r\n  onSignInClick = () => {\r\n    this.auth.signIn();\r\n  };\r\n\r\n  renderAuthButton() {\r\n    //determines which button to show and puts event listeners on it\r\n    if (this.props.isSignedIn === null) {\r\n      return null;\r\n    } else if (this.props.isSignedIn) {\r\n      return (\r\n        <button onClick={this.onSignOutClick} className=\"ui red google button\">\r\n          <i className=\"google icon\" />\r\n          Sign Out\r\n        </button>\r\n      );\r\n    } else if (this.props.isSignedIn === false) {\r\n      return (\r\n        <button onClick={this.onSignInClick} className=\"ui red google button\">\r\n          <i className=\"google icon\" />\r\n          Sign In With Google\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.renderAuthButton()}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { isSignedIn: state.auth.isSignedIn };\r\n};\r\n\r\nexport default connect(mapStateToProps, { signIn, signOut })(GoogleAuth);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./Header.css\";\r\nimport GoogleAuth from \"../GoogleAuth\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"ui secondary pointing menu\">\r\n      <Link to=\"/streams2-client\" className=\"item\">\r\n        StreamSling\r\n      </Link>\r\n      <div className=\"right menu\">\r\n        <Link to=\"/streams2-client\" className=\"item\">\r\n          All Streams\r\n        </Link>\r\n\r\n        <GoogleAuth />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport StreamList from \"./streams/StreamList\";\r\nimport StreamCreate from \"./streams/StreamCreate\";\r\nimport StreamEdit from \"./streams/StreamEdit\";\r\nimport StreamDelete from \"./streams/StreamDelete\";\r\nimport StreamShow from \"./streams/StreamShow\";\r\nimport Header from \"./header/Header\";\r\nimport history from \"../history\";\r\n\r\n//since we have to do programatic routing, we are no longer going to\r\n//create a browser router, we are going to make a plain router\r\n//We are doing this so we can create our own broswer history so we have\r\n//easy access to the history and the ability to do programatic routing\r\n\r\n//when we pass a prop to the router called history, the browser will attempt to\r\n//use it instead of the default\r\nconst App = () => {\r\n  return (\r\n    <div className=\"ui container\">\r\n      <Router history={history}>\r\n        <>\r\n          <Header />\r\n          <Switch>\r\n            <Route path=\"/streams2-client/\" exact component={StreamList} />\r\n            <Route path=\"/streams2-client/new\" exact component={StreamCreate} />\r\n            <Route\r\n              path=\"/streams2-client/edit/:id\"\r\n              exact\r\n              component={StreamEdit}\r\n            />\r\n            <Route\r\n              path=\"/streams2-client/delete/:id\"\r\n              exact\r\n              component={StreamDelete}\r\n            />\r\n            {/* the new components path matches this id so we use Switch which will only show one route at any given time*/}\r\n            <Route path=\"/streams2-client/:id\" exact component={StreamShow} />\r\n          </Switch>\r\n        </>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { SIGN_IN, SIGN_OUT } from \"../actions/types\";\r\n\r\nconst INITIAL_STATE = {\r\n  isSignedIn: null,\r\n  userId: null,\r\n};\r\n\r\nconst authReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case SIGN_IN:\r\n      return { ...state, isSignedIn: true, userId: action.payload };\r\n    case SIGN_OUT:\r\n      return { ...state, isSignedIn: false, userId: null };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n","import _ from \"lodash\";\r\n\r\nimport {\r\n  FETCH_STREAMS,\r\n  FETCH_STREAM,\r\n  CREATE_STREAM,\r\n  EDIT_STREAM,\r\n  DELETE_STREAM,\r\n} from \"../actions/types\";\r\n\r\nconst streamReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case FETCH_STREAM:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case FETCH_STREAMS:\r\n      //lodash _.mapKeys turns an array into an object. second argument is what array item gets used as the key value\r\n      return { ...state, ..._.mapKeys(action.payload, \"id\") };\r\n    case CREATE_STREAM:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case EDIT_STREAM:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case DELETE_STREAM:\r\n      //lodash _.omit removes whole item matching key value, returns a new object\r\n      return _.omit(state, action.payload);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default streamReducer;\r\n","import { combineReducers } from \"redux\";\r\n//reducer is a premade reducer from redux-form, change the name to formReducer\r\nimport { reducer as formReducer } from \"redux-form\";\r\n\r\nimport authReducer from \"./authReducer\";\r\nimport streamReducer from \"./streamReducer\";\r\n\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  streams: streamReducer,\r\n  //the redux-form reducer must be called form\r\n  form: formReducer,\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport reduxThunk from \"redux-thunk\";\r\n// const NodeMediaServer = require('node-media-server');\r\n\r\nimport App from \"./components/App\";\r\nimport reducers from \"./reducers\";\r\n\r\n//redux dev tools chrome extension\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n//reducerse are combined in the reducer index\r\nconst store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(reduxThunk))\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}